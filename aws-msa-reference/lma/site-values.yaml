apiVersion: openinfradev.github.com/v1
kind: HelmValuesTransformer
metadata:
  name: site
global:
  nodeSelector:
    taco-lma: enabled
  clusterName: siim-dev
  storageClassName: taco-storage
  repository: https://openinfradev.github.io/helm-repo/
  serviceScrapeInterval: 30s
  defaultPassword: tacoword
  defaultUser: taco
  thanosObjstoreSecret: taco-objstore-secret
  lokiHost: loki-loki-distributed-gateway
  lokiPort: 80
  lokiuserHost: loki-user-loki-distributed-gateway
  lokiuserPort: 80
  s3Service: "minio.taco-system.svc:9000" # depends on $lmaNameSpace (ex. minio.taco-system.svc)
  lmaNameSpace: taco-system
  TksWebhookUrl: "FixItByWF"
  SlackUrl: https://hooks.slack.com/services/T0WU4JZEX/BGK2W2NUF/ #y2S2Y8FjfkbBs1eQ6u2Y6b8L #"FixItByWF"
  SlackChannel: '#temporary-alert'
  grafanaDatasourceMetric: thanos-query-frontend:9090
  thanosQueryStores:
    - thanos-storegateway:10901
    - prometheus-operated:10901
    - 192.168.5.131:30901
    - 192.168.5.151:30901
    - 192.168.5.161:30901
  # servicemesh dashboard and grafana
  realms: 04a70f29
  consoleUrl: tks-console.taco-cat.xyz
  grafanaDomain: taco-cat.xyz
  keycloakDomain: keycloak-eom.taco-cat.xyz
  grafanaClientSecret: JLtsanYtrCg21RGxrcVmQP0GeuDFUhpA
  awsNlbAnnotation:
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  tksIamRoles: []
charts:
  - name: prometheus-operator
    base: prometheus-operator
  - name: prometheus
    base: prometheus
    # override:
    #   alertmanager:
    #     config:
    #       receivers:
    #         - name: tks-alert
    #           webhook_configs:
    #             - send_resolved: true
    #               url: $(TksWebhookUrl)
    #       route:
    #         group_by:
    #           - alertname
    #         group_wait: 10s
    #         receiver: default-alert
    #         repeat_interval: 1h
    #         routes: []
  - name: prometheus-node-exporter
    base: prometheus-node-exporter
    override:
      # sidecars:
      #   - name: nvidia-dcgm-exporter
      #     image: nvidia/dcgm-exporter:1.4.3
      #     volumeMounts:
      #       - name: tmp
      #         mountPath: /tmp
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
        - key: node-role.kubernetes.io/master
          operator: Exists
        - key: nvidia.com/gpu #:NoSchedule
          operator: Exists
        - key: tks.io/ceph
          operator: Exists
  - name: kube-state-metrics
    base: kube-state-metrics
    override:
      kubeVersion: v1.30.2
  - name: prometheus-pushgateway
    base: prometheus-pushgateway
  - name: prometheus-process-exporter
    base: prometheus-process-exporter
    override:
      conf.processes: dockerd,kubelet,kube-proxy,ntpd,node
  - name: grafana
    base: grafana
    override:
    # service:
    #   annotations: $(awsNlbAnnotation)
    #   type: LoadBalancer
    # grafana\.ini:
    #   server:
    #     domain: $(grafanaDomain)
    #     root_url: http://$(grafanaDomain)
    #     serve_from_sub_path: true
    #   auth.generic_oauth:
    #     enabled: true
    #     name: keycloak
    #     allow_sign_up: true
    #     client_id: grafana
    #     client_secret: $(grafanaClientSecret)
    #     scopes: openid profile email
    #     login_attribute_path: username
    #     auth_url: https://$(keycloakDomain)/auth/realms/$(realms)/protocol/openid-connect/auth
    #     token_url: https://$(keycloakDomain)/auth/realms/$(realms)/protocol/openid-connect/token
    #     api_url: https://$(keycloakDomain)/auth/realms/$(realms)/protocol/openid-connect/userinfo
    #     signout_redirect_url: $(consoleUrl)/login
    #   # auth:
    #   #   disable_login_form: false
    #   #   oauth_auto_login: true
    #   #   disable_signout_menu: true
    #   user:
    #     auto_assign_org: true
    #     auto_assign_org_role: Admin
  - name: fluent-operator
    base: fluent-operator
  - name: fluentbit
    base: fluentbit
  - name: addons
    base: addons
  - name: prometheus-adapter
    base: prometheus-adapter
  - name: kubernetes-event-exporter
    base: kubernetes-event-exporter
  - name: minio
    base: minio
    # override:
    #   service:
    #     annotations: $(awsNlbAnnotation)
    #     type: LoadBalancer
  - name: thanos
    base: thanos
    # override:
    #   prometheus:
    #     thanosServiceExternal:
    #       annotations: $(awsNlbAnnotation)
    #       type: LoadBalancer
    #   ruler:
    #     service:
    #       annotations: $(awsNlbAnnotation)
    #       type: LoadBalancer
  - name: thanos-config
    base: thanos-config
  - name: prepare-etcd-secret
    base: prepare-etcd-secret
    override:
      nodeSelector:
        "node-role.kubernetes.io/control-plane": ""
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          effect: "NoSchedule"
          operator: "Exists"
        - key: "node-role.kubernetes.io/master"
          effect: "NoSchedule"
          operator: "Exists"
      deployer: "tacoplay"
  - name: loki
    base: loki
    override:
      global:
        dnsService: coredns
        #     clusterDomain: cluster.local # 
        #   gateway:
        #     service:
        #       annotations: $(awsNlbAnnotation)
        #       type: LoadBalancer
        #   queryFrontend:
        #     service:
        #       annotations: $(awsNlbAnnotation)
        #       type: LoadBalancer
  - name: loki-user
    base: loki
  - name: lma-bucket
    base: lma-bucket
  - name: eck-resource
    base: eck-resource
